What is a hash table?

A hast table or also known as hash data structure is a data structure that stores every value by linking it to a key and then forms key-value pairs. This is very similar to JavaScript objects.

What is hashing?

Is the process to convert arbitrary data into a hash code using a hashing function.

How does a hash table store data?

Hash table stores data by using a hash function to create an index into an array where an  element will be inserted or searched.


How are hash tables and objects different?

Hash tables and objects are different where objects are individual data bundles and a hash table has all the data in one place and uses hashing. 

Determine whether you would use a hash table or an object to store each of the following pieces of data:
A list of pets and their unique names. Hash table

The name, age, and the birthday of your best friend. Object

The name and location of every company in a given city. Hash table

All of the books checked out from a library by a particular individual. Hash table

The primary and secondary phone numbers for a contact.Object

Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

var hash = (string, max)=> {
    var hash = 0;
    for (var i=0; i<string.length; i++){
        hash+= string.charCodeAt(i);
    }
    return hash % max;
};

let HashTable = function(){
    let storage =[];
    const storageLimit = 100;


this.add = function(name, address, phone){
    var index = hash(phone, storageLimit);
    if (storage[index] === undefined) {
        storage[index] = [[name, address, phone]];
    } else {
      var inserted = false;
      for (var i=0; i< storage[index].length; i++){
          if(storage[index][i][2]===phone){
              storage[index][i][0]= name;
              storage[index][i][1]= address;
              inserted = true;
          }
      }
      if (inserted === false){
          storage[index].push([name,address,phone]);
      }
    }
};

this.lookup = function(phone){
    var index = hash(phone, storageLimit);
    if (storage[index] === undefined){
        return undefined;
    } else {
      for (var i=0; i<storage[index].length; i++){
          if (storage[index][i][2]===phone){
              return storage[index][i][0];
          }
      }
    }
};
};  



let ht = new HashTable();
ht.add('John Davies', '9 Ridgeway Circle', '610 370 0864');
ht.add('Jared Davies', '1021 Wedgewood Circle', '610 507 9140');
console.log(ht.lookup('610 507 9140'));


Build a system that allows a store owner to track their store's inventory using a hash table for storage.

var hash = (string, max)=> {
    var hash = 0;
    for (var i=0; i<string.length; i++){
        hash+= string.charCodeAt(i);
    }
    return hash % max;
};

let HashTable = function(){
    let storage =[];
    const storageLimit = 100;


this.add = function(item, inventory){
    var index = hash(item, storageLimit);
    if (storage[index] === undefined) {
        storage[index] = [[item, inventory]];
    } else {
      var inserted = false;
      for (var i=0; i< storage[index].length; i++){
          if(storage[index][i][2]===item){
              storage[index][i][0]= inventory;
              inserted = true;
          }
      }
      if (inserted === false){
          storage[index].push([item, inventory]);
      }
    }
};
  
this.remove = function(item){
    var index = hash(item, storageLimit);
    if (storage[index].length === 1 && storage[index][0][0]===item && storage[index][0][1]>0){
        return storage[index][0][1]--;
    } else { 
        console.log("Out of Stock");
    }
        
};

this.lookup = function(item){
    var index = hash(item, storageLimit);
    if (storage[index] === undefined){
        return undefined;
    } else {
      for (var i=0; i<storage[index].length; i++){
          if (storage[index][i][0]===item){
              if (storage[index][i][1]>0){
                  return storage[index][i][1];
               } else {
              console.log("Out of Stock");
          }
          }
      }
    }
};
};  



let ht = new HashTable();
ht.add('Golf Clubs', 10);
ht.add('Golf Balls', 100);
ht.add('Golf Bags', 0);
ht.remove('Golf Clubs')
console.log(ht.lookup('Golf Clubs'));


Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

var hash = (string, max)=> {
    var hash = 0;
    for (var i=0; i<string.length; i++){
        hash+= string.charCodeAt(i);
    }
    return hash % max;
};

let HashTable = function(){
    let storage =[];
    const storageLimit = 100;


this.add = function(publisher, date, newspaper){
    var index = hash(publisher, date, storageLimit);
    if (storage[index] === undefined) {
        storage[index] = [[publisher, date, newspaper]];
    } else {
      var inserted = false;
      for (var i=0; i< storage[index].length; i++){
          if(storage[index][i][0]===publisher){
              storage[index][i][1]= date;
              storage[index][i][2]= newspaper;
              inserted = true;
          }
      }
      if (inserted === false){
          storage[index].push([publisher, date, newspaper]);
      }
}  
};


this.lookup = function(publisher, date){
    var index = hash(publisher, date, storageLimit);
    if (storage[index] === undefined){
        return undefined;
    } else {
      for (var i=0; i<storage[index].length; i++){
          if (storage[index][i][0]===publisher){
                  return storage[index][i][2];
          }
      }
    }

}; 
}

let ht = new HashTable();
ht.add('Jared', 1992, "President");
ht.add('Christina', 1993, 'Books');
ht.add('Bloc', 1994, 'CES');
console.log(ht.lookup('Jared',1992));