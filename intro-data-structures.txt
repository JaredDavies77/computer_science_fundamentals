A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

var parkLine = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];


b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

var endOfTheLine = function(newbie){
   parkLine.push(newbie);
}

endOfTheLine("Mary");
console.log(parkLine);


c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

var findInLine = function(name){
   parkLine.indexOf(name);
}

findInLine("Josh");
console.log(parkLine);



d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?


findInLine("Emily");

It will return undefined if it is not found.

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

var cutInLine = function(index, friend){
   parkLine.insert(index, friend);
}

cutInLine(1, "Melissa");
console.log(parkLine);




f) If Patrick wants to leave the line, how would you delete him from the array?


var leaveLine = function(index, numPeopleLeaving){
   parkLine.splice(index, numPeopleLeaving);
}

leaveLine(3,1);
console.log(parkLine);




Provide another real-world example that you can model using a data structure.

Another example of this would be buying tickets to any major concert or sporting event where there is an online queue or waitlist.

How would your data structure allow developers to access and manipulate the data?

I would allow to be able to see IP addresses as people reach the buying screen. This way they can see the order. Also they would be able to see who buys and who exits. Also, they will be able to see who times out. Lastly, they then would be able to see and adjust once the event is sold out.