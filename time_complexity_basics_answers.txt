What is time complexity and what is its relation to algorithms?

Time complexity is a function that shows the approximate time to execute a program. It relates to algorithms because it determines how efficient they are. 

What is runtime?

Runtime is the physical duration of an algorithm. 


How is the runtime of an algorithm calculated?

To calculate runtime you need to add up how many instructions the algorithm has as a function of the size of its input, then you simplify the expression to the largest term and drop all the constants.

Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

Constant 
Logarithmic 
Linear 
Quadratic 
Polynomial
Exponential 



Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Linear - waiting in line for a roller coaster. 

Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION
Determine the time complexity of the following snippet of code.

Linear Growth O(n)


FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

Quadratic O(n^2)


Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

Exponential O(2^n)

Out of the code snippets you just saw, which is the most time efficient?

The first code snippet is the most time efficient being linear growth. 


