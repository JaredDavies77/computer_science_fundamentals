What is the main difference between a stack and a queue?

A stack is a group of objects that works in LIFO and a queue works FIFO.

What are the similarities between stacks and queues?

Similarities are:
-that they both are adding and removing data.
-both a type of data structure
-both enable engineers to rank tasks, create an order of operations, and support system functions

Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

UNDO - I would use a stack because you would be manipulating the most recent (last in) data entered and deleting it (first out).

REDO - I would also use a stack because you would be again manipulating the most recently deleted (last in) and sending them back on to the page (first out). 
 
Programming Questions
You may program the following question in any language of your choice. Before you begin coding, write out a plan as to how you will solve the question.

Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

function reverseString(string) {
    var reversed = "";
    for (let i = string.length - 1; i >= 0; i--) {
        reversed.push(str[i]);
    }
    return reversed;
}
reverseString("Bloc!");

Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

function mirror(string) {
    var mirrored = "";
    for (let i = string.length - 1; i >= 0; i--) {
        mirrored.push(string[i]);
    }
    return mirrored.pop();
    return mirrored;
}
mirror(1,2,3,4,5);



To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.



Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.
var 

var queue = "";
function enqueue(element){
	queue.push(element);
}
enqueue(1);

function dequeue(){
	queue.pop();
}
dequeue(); 

	